import com.android.build.gradle.AppPlugin
import com.android.build.gradle.LibraryPlugin

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id "com.jfrog.bintray" version "1.7.3"
}

ext.app = [
        compileSdkVersion : 23,
        buildToolsVersion : '25.0.1',
        minSdkVersion     : 17,
        targetSdkVersion  : 23,
        versionCode       : 1,
        versionName       : '1.0.0',
        applicationId     : 'orwir.widget.example'
]

ext.bcred = loadBintrayCredentials()

allprojects {
    repositories {
        jcenter()
    }
}

subprojects {
    afterEvaluate { Project project ->
        if (project.plugins.withType(AppPlugin) || project.plugins.withType(LibraryPlugin)) {
            android {
                compileSdkVersion app.compileSdkVersion
                buildToolsVersion app.buildToolsVersion

                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

def version = [
        //compile time
        retrolambda    : '3.4.0',

        //google
        support        : '25.0.0',

        //network
        okhttp         : '3.4.2',
        retrofit       : '2.1.0',
        gson           : '2.8.0',

        //reactive
        rxJava         : '1.2.3',
        rxAndroid      : '1.2.1',
        rxLifecycle    : '1.0',
        rxBinding      : '0.4.0',

        //misc
        timber         : '4.3.1',
        picasso        : '2.5.2',
        butterKnife    : '8.4.0',
        materialDrawer : '5.8.1@aar',

        //development tools
        leakcanary     : '1.5',
        junit          : '4.12'
]

ext.lib = [
        //compile time
        retrolambda             : "me.tatarka:gradle-retrolambda:$version.retrolambda",

        //google
        supportAppCompatV7      : "com.android.support:appcompat-v7:$version.support",
        supportAnnotations      : "com.android.support:support-annotations:$version.support",
        supportV4               : "com.android.support:support-v4:$version.support",
        supportV13              : "com.android.support:support-v13:$version.support",
        supportRecyclerViewV7   : "com.android.support:recyclerview-v7:$version.support",
        supportCardViewV7       : "com.android.support:cardview-v7:$version.support",
        supportDesign           : "com.android.support:design:$version.support",

        //network
        okhttp                  : "com.squareup.okhttp3:okhttp:$version.okhttp",
        okhttpLogging           : "com.squareup.okhttp3:logging-interceptor:$version.okhttp",
        retrofit                : "com.squareup.retrofit2:retrofit:$version.retrofit",
        retrofitConverterGson   : "com.squareup.retrofit2:converter-gson:$version.retrofit",
        retrofitAdapterRxJava   : "com.squareup.retrofit2:adapter-rxjava:$version.retrofit",
        gson                    : "com.google.code.gson:gson:$version.gson",

        //reactive
        rxJava                  : "io.reactivex:rxjava:$version.rxJava",
        rxAndroid               : "io.reactivex:rxandroid:$version.rxAndroid",
        rxBinding               : "com.jakewharton.rxbinding:rxbinding:$version.rxBinding",
        rxBindingSupportV4      : "com.jakewharton.rxbinding:rxbinding-support-v4:$version.rxBinding",
        rxBindingAppCompatV7    : "com.jakewharton.rxbinding:rxbinding-appcompat-v7:$version.rxBinding",
        rxBindingDesign         : "com.jakewharton.rxbinding:rxbinding-design:$version.rxBinding",
        rxBindingRecyclerViewV7 : "com.jakewharton.rxbinding:rxbinding-recyclerview-v7:$version.rxBinding",
        rxLifecycle             : "com.trello:rxlifecycle:$version.rxLifecycle",
        rxLifecycleAndroid      : "com.trello:rxlifecycle-android:$version.rxLifecycle",
        rxLifecycleComponents   : "com.trello:rxlifecycle-components:$version.rxLifecycle",

        //misc
        timber                  : "com.jakewharton.timber:timber:$version.timber",
        picasso                 : "com.squareup.picasso:picasso:$version.picasso",
        butterKnife             : "com.jakewharton:butterknife:$version.butterKnife",
        butterKnifeCompiler     : "com.jakewharton:butterknife-compiler:$version.butterKnife",
        materialDrawer          : "com.mikepenz:materialdrawer:$version.materialDrawer",

        //development
        leakcanary              : [
                'on'                : "com.squareup.leakcanary:leakcanary-android:$version.leakcanary",
                'off'               : "com.squareup.leakcanary:leakcanary-android-no-op:$version.leakcanary"
        ],
        junit                   : "junit:junit:$version.junit"
]

def publishedProjects = ['expandable']
configure(allprojects.findAll {publishedProjects.contains(it.name)}) {

    evaluationDependsOn(':' + project.name)

    //apply plugin: 'com.jfrog.bintray'

    group = 'orwir.android.widget'
    version = app.versionName

    bintray {
        user = bcred.user
        key = bcred.key
        configurations = ['archives']
        publish = false

        pkg {
            repo = 'maven'
            name = 'android-widgets'
            desc = 'Just another common widgets'
            websiteUrl = 'https://github.com/orwir/android-widgets'
            issueTrackerUrl = 'https://github.com/orwir/android-widgets/issues'
            vcsUrl = 'https://github.com/orwir/android-widgets.git'
            licenses = ['Apache-2.0']
            labels = ['widget', 'android', 'ui']
            publicDownloadNumbers = true
        }
    }

}

def loadBintrayCredentials() {
    File local = file('bintray.properties')
    if(local.exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(local))
        return [
                user : props['bintray.user'],
                key  : props['bintray.key']
        ]
    } else {
        return [
                user : System.getenv('bintray_user'),
                key  : System.getenv('bintray_key')
        ]
    }
}
